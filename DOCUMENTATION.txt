Fantasy Game Simulation - Design Patterns Documentation

Overview
This project implements a fantasy game simulation in C# using multiple design patterns to organize the code, enhance maintainability, and demonstrate best practices. The key design patterns applied are:

    Factory Pattern — For character creation

    Singleton Pattern — For global game state management

    Repository Pattern — For managing inventory items

    Adapter Pattern — For integrating legacy skill models

Each pattern is described in detail below with explanations and relevant code.



1. Factory Pattern

Usage in Project

CharacterFactory is a static factory class that creates different types of characters (Warrior, Mage, Archer) based on a string input. This centralizes character instantiation logic and hides the concrete classes from client code.

Code:
public class CharacterFactory {
    public static ICharacter CreateCharacter(string type, string name) {
        ICharacter character;

        switch (type.ToLower()) {
            case "warrior":
                character = new Warrior(name);
                break;
            case "mage":
                character = new Mage(name);
                break;
            case "archer":
                character = new Archer(name);
                break;
            default:
                throw new ArgumentException("Invalid character type");
        }

        return character;
    }
}

Explanation: 

The CreateCharacter method abstracts the creation of various character types.
Users request a character by type and name, without needing to know class details.
This improves extensibility: adding a new character type requires minimal change (just update the factory).


2. Singleton Pattern

Usage in Project

The GameState class implements the Singleton Pattern to maintain a single game state throughout the application. It tracks current level, environment, and active characters.

Code:
public class GameState {
    private static GameState _instance;
    private static readonly object _lock = new object();

    public int CurrentLevel { get; set; } = 1;
    public List<ICharacter> Characters { get; } = new List<ICharacter>();
    public string Environment { get; set; } = "Forest";

    private GameState() { }

    public static GameState GetInstance() {
        if (_instance == null) {
            lock (_lock) {
                if (_instance == null) {
                    _instance = new GameState();
                }
            }
        }
        return _instance;
    }
}


Explanation:

The constructor is private to prevent external instantiation.
GetInstance() uses double-checked locking for thread-safe lazy initialization.
Ensures all parts of the program use the same GameState instance, maintaining consistent game data.


3. Repository Pattern

Usage in Project

InventoryRepository implements IInventoryRepository to manage the collection of game Item objects (add, remove, find).


Code:
public interface IInventoryRepository {
    void AddItem(Item item);
    void RemoveItem(string itemName);
    IEnumerable<Item> GetItems();
    Item FindItemByName(string name);
}

public class InventoryRepository : IInventoryRepository {
    private readonly List<Item> _items = new List<Item>();

    public void AddItem(Item item) {
        _items.Add(item);
    }

    public void RemoveItem(string itemName) {
        _items.RemoveAll(i => i.Name.Equals(itemName, StringComparison.OrdinalIgnoreCase));
    }

    public IEnumerable<Item> GetItems() {
        return _items;
    }

    public Item FindItemByName(string name) {
        return _items.FirstOrDefault(i => i.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
    }
}

Explanation:

The repository encapsulates all inventory operations.
Business logic interacts with IInventoryRepository, unaware of how data is stored.
This enables easier testing, maintenance, and potential future changes to storage.


4. Adapter Pattern

Usage in Project

The project includes a legacy skill system (LegacySkill.cs) that does not implement the ISkill interface. The LegacySkillAdapter adapts LegacySkill to ISkill, allowing it to be used seamlessly in the new system.

Code:
public class LegacySkillAdapter : ISkill {
    private readonly LegacySkill _legacySkill;

    public LegacySkillAdapter(LegacySkill legacySkill) {
        _legacySkill = legacySkill;
    }

    public string Name => _legacySkill.SkillName;

    public void UseSkill() {
        _legacySkill.ExecuteLegacySkill();
    }

    public void DealDamage(int damage, ICharacter character) {
        character.TakeDamage(damage);
        Console.WriteLine($"{character.Name} is hit by {Name} for {damage} damage!");
    }
}


Explanation: 

LegacySkillAdapter wraps a LegacySkill instance.
It exposes the ISkill interface methods, calling the legacy implementation internally.
This allows legacy code reuse without rewriting or changing its original structure.

































































